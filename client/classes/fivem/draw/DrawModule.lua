---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Absolute.
--- DateTime: 05/10/2024
---

_cn.DrawModule = "DrawModule";
loadClass(_cn.DrawModule)

--- Imports ---
_a.ApplicationScope()
_a.AModule()
---@class DrawModule : Module
local DrawModule = extends("DrawModule", "Module");

function DrawModule.new()
    ---@type DrawModule
    local self = initMetatable(DrawModule);

    Ats.thread(function()
        while true do
            Ats.wait(0)
        end
    end)

    self.drawables = _c.List.new();
    ---@type ThreadTimer
    self.timer = nil;

    self.gizmoEnabled = false;

    return self;
end

function DrawModule:onLoad()

end

function DrawModule:onStart()
    _c     .ThreadTimer.new(function()
        ---@param drawable DrawableElement
        self.drawables:each(function(drawable)

            if not drawable then
                return ;
            end

            if drawable.onDraw then
                drawable:onDraw();
            end
            drawable:draw();
        end)

        if self.helpNotification then
            if self.helpNotification.duration > 0 and GetGameTimer() - self.helpNotification.start > self.helpNotification.duration then
                self.helpNotification = nil;
            end
            self:drawHelpNotification(self.helpNotification.text)
        elseif self.helpNotificationWithButton then
            if self.helpNotificationWithButton.duration > 0 and GetGameTimer() - self.helpNotificationWithButton.start > self.helpNotificationWithButton.duration then
                self.helpNotificationWithButton = nil;
            end
            self:drawHelpNotificationWithButton(self.helpNotificationWithButton.text, self.helpNotificationWithButton.button)
        end

        self.helpNotification = nil;
        self.helpNotificationWithButton = nil;
    end, 0):run();
end

---@param text string
---@param position Vector3
---@param scaleFactor number
---@param hasBackground boolean
---@return Text3D
function DrawModule:drawText3D(text, position, scaleFactor, hasBackground)
    local text3D = _c.Text3D.new(text, scaleFactor, position.x, position.y, position.z, 10.0,
            _c.Color.new(255, 255, 255, 255));
    text3D:register();

    if hasBackground then
        text3D:drawBackground(_c.Color.new(0, 0, 0, 100))
    end

    self:registerDrawable(text3D);
    return text3D;
end

function DrawModule:showHelpNotification(text, duration)
    self.helpNotification = { text = text, duration = duration or -1, start = GetGameTimer() }
end

function DrawModule:showHelpNotificationWithButton(text, button, duration)
    self.helpNotificationWithButton = { text = text, button = button, duration = duration or -1, start = GetGameTimer() }
end

function DrawModule:drawHelpNotification(text)
    BeginTextCommandDisplayHelp("STRING")
    AddTextComponentSubstringPlayerName(text)
    EndTextCommandDisplayHelp(0, false, false, -1)
end

function DrawModule:drawHelpNotificationWithButton(text, button)
    BeginTextCommandDisplayHelp("STRING")
    AddTextComponentSubstringPlayerName(text)
    EndTextCommandDisplayHelp(0, false, false, -1)
    BeginTextCommandSetBlipName("STRING")
    AddTextComponentSubstringPlayerName(button)
    EndTextCommandSetBlipName(0)
end

---@param drawable DrawableElement
function DrawModule:registerDrawable(drawable)
    self.drawables:push(drawable);
end

function DrawModule:unregisterDrawable(drawable)
    self.drawables:removeElement(drawable);
end

---@param entity Entity
---@param text string
---@param scale Vector3
---@param x number
---@param y number
---@param z number
---@param distance number
---@param distanceToInteract number
---@param color Color
---@return ProximityText
function DrawModule:registerProximityText(entity, text, scale, x, y, z, distance, distanceToInteract, color, offset)
    local proximityText = _c.ProximityText.new(entity, text, scale, x, y, z, distance, distanceToInteract, color, offset);
    proximityText:register();
    return proximityText;
end

function DrawModule:drawGizmo(entity)
    self.gizmoEnabled = true;
    self:gizmoLoop(entity);
end

function DrawModule:applyEntityMatrix(entity)
    local x1, y1, z1 = view:GetFloat32(16), view:GetFloat32(20), view:GetFloat32(24)
    local x2, y2, z2 = view:GetFloat32(0), view:GetFloat32(4), view:GetFloat32(8)
    local x3, y3, z3 = view:GetFloat32(32), view:GetFloat32(36), view:GetFloat32(40)
    local tx, ty, tz = view:GetFloat32(48), view:GetFloat32(52), view:GetFloat32(56)

    --if not enableScale then
    --    x1, y1, z1 = normalize(x1, y1, z1)
    --    x2, y2, z2 = normalize(x2, y2, z2)
    --    x3, y3, z3 = normalize(x3, y3, z3)
    --end

    SetEntityMatrix(entity,
            x1, y1, z1,
            x2, y2, z2,
            x3, y3, z3,
            tx, ty, tz
    )
end

function DrawModule:makeEntityMatrix(entity)
    local f, r, u, a = GetEntityMatrix(entity)
    local view = dataview.ArrayBuffer(60)

    view:SetFloat32(0, r[1])
        :SetFloat32(4, r[2])
        :SetFloat32(8, r[3])
        :SetFloat32(12, 0)
        :SetFloat32(16, f[1])
        :SetFloat32(20, f[2])
        :SetFloat32(24, f[3])
        :SetFloat32(28, 0)
        :SetFloat32(32, u[1])
        :SetFloat32(36, u[2])
        :SetFloat32(40, u[3])
        :SetFloat32(44, 0)
        :SetFloat32(48, a[1])
        :SetFloat32(52, a[2])
        :SetFloat32(56, a[3])
        :SetFloat32(60, 1)

    return view
end

function DrawModule:gizmoLoop(entity)
    if not self.gizmoEnabled then
        return LeaveCursorMode()
    end

    EnterCursorMode()

    if IsEntityAPed(entity) then
        SetEntityAlpha(entity, 200)
    else
        SetEntityDrawOutline(entity, true)
    end

    while self.gizmoEnabled and DoesEntityExist(entity) do
        Wait(0)

        DisableControlAction(0, 24, true)  -- lmb
        DisableControlAction(0, 25, true)  -- rmb
        DisableControlAction(0, 140, true) -- r
        DisablePlayerFiring(PlayerId(), true)

        local matrixBuffer = self:makeEntityMatrix(entity)
        local changed = Citizen.InvokeNative(0xEB2EDCA2, matrixBuffer:Buffer(), 'Editor1',
                Citizen.ReturnResultAnyway())

        if changed then
            self:pplyEntityMatrix(entity, matrixBuffer)
        end
    end

    LeaveCursorMode()

    if DoesEntityExist(entity) then
        if IsEntityAPed(entity) then
            SetEntityAlpha(entity, 255)
        end
        SetEntityDrawOutline(entity, false)
    end

    gizmoEnabled = false
    currentEntity = nil
end

_c.DrawModule = DrawModule;
classloaded(_cn.DrawModule)
