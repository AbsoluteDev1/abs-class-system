---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Absolute.
--- DateTime: 21/12/2023 01:18
---

_cn.Observable = "Observable";
loadClass(_cn.Observable)

--- Imports ---
---@type ObservableMap
local ObservableMap = import(_cn.ObservableMap)

---@class Observable : BaseObject
local Observable = class(_cn.Observable);

---@param callback fun(subscriber:Subscriber)
function Observable.new(callback)
	---@type Observable
    local self = initMetatable(Observable);

	self.observer = _c.Subscriber.new();
	---@private
	self._subscribe = callback;

	self.subcribers = ObservableMap.new();

    return self;
end
---@param subscriber { next : fun, error : fun, complete : fun }
function Observable:subscribe(subscriber)
	local sub = _c.Subscriber.new();

	sub._next = subscriber.next;
	sub._error = subscriber.error;
	sub._complete = subscriber.complete;

	self._subscribe(sub);

	return sub;
end

---@param subscriber Subscriber
function Observable:removeSubscriber(subscriber)
	self.subcribers:remove(subscriber);
end

---@param observable Observable
function Observable:combine(observable)
	---@param subscriber Subscriber
	local combined = Observable.new(function(subscriber)

		local values = {};

		observable:subscribe({
			next = function(value)
				values[1] = value;
				if(values[1] and values[2]) then
					subscriber:next(values);
				end
			end,
		})

		self:subscribe({
			next = function(value)
				values[2] = value;
				if(values[1] and values[2]) then
					subscriber:next(values);
				end
			end,
		})
	end);

	return combined;
end

function Observable:foreach(callback)
	self:subscribe({
		next = function(value)
			callback(value);
		end,
	})
end

function Observable:filter(callback)
	local filtered = Observable.new(function(subscriber)
		self:subscribe({
			next = function(value)
				if(callback(value)) then
					subscriber:next(value);
				end
			end,
		})
	end);

	return filtered;
end

function Observable:map(callback)
	local mapped = Observable.new(function(subscriber)
		self:subscribe({
			next = function(value)
				subscriber:next(callback(value));
			end,
		})
	end);

	return mapped;
end

_c.Observable = Observable;
classloaded(_cn.Observable)