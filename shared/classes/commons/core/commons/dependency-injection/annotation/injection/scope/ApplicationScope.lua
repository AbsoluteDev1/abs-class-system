---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Absolute.
--- DateTime: 21/12/2023 11:24
---

_cn.ApplicationScope = "ApplicationScope"
loadClass(_cn.ApplicationScope)

---@type DependencyInjection
local DependencyInjection = import("DependencyInjection");

---@class ApplicationScope : Annotation
local ApplicationScope = extends("ApplicationScope", "Annotation");

function ApplicationScope.new(tableRef, attr, params)
    ---@type ApplicationScope
    local self = initMetatable(ApplicationScope);
    self.innerTable = tableRef;
    self.innerAttr = attr;
    self.params = params;
    Interface.thread(function()
        local dependencyInjection = getSingleton(DependencyInjection);
        dependencyInjection:registerInjectableCandidat(self.innerTable.__class__, Enum.Scope.SINGLETON)
        singleton(self.innerTable.__class__)

        local instance = getSingleton(self.innerTable);
        if instance.postContruct ~= nil then
            instance:postContruct();
        end
    end)
    return self;
end

function ApplicationScope:onValueChange(object, attr, value)

end

_a.ApplicationScope = annotation(_cn.ApplicationScope, ApplicationScope)
_c.ApplicationScope = ApplicationScope
classloaded(_cn.ApplicationScope)