---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Absolute.
--- DateTime: 05/10/2024
---

_cn.ThreadManager = "ThreadManager";
loadClass(_cn.ThreadManager)

--- Imports ---

_a.ApplicationScope()
---@class ThreadManager : BaseObject
local ThreadManager = class("ThreadManager");

function ThreadManager.new()
    ---@type ThreadManager
    local self = initMetatable(ThreadManager);

    self.threads = _c.List.new();

    return self;
end

function ThreadManager:killAll()
    for i = 1, self.threads:size() do
        self.threads:get(i):kill();
    end
end

function ThreadManager:killAllExcept(except)
    for i = 1, self.threads:size() do
        if self.threads:get(i) ~= except then
            self.threads:get(i):kill();
        end
    end
end

function ThreadManager:getThreads()
    return self.threads;
end

function ThreadManager:getThread(name)
    local thread = self.threads:filter(function(thread)
        return thread.name == name;
    end)               :first();

    return thread;
end

function ThreadManager:kill(name)
    local thread = self:getThread(name);

    if thread then
        thread:kill();
    end
end

_c.ThreadManager = ThreadManager;
classloaded(_cn.ThreadManager)

---@type ThreadManager
threadManager = getSingleton(_cn.ThreadManager);