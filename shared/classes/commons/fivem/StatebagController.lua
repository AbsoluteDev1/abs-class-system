-----
----- Generated by EmmyLua(https://github.com/EmmyLua)
----- Created by Absolute.
----- DateTime: 12/10/2024
-----
--
--_cn.StatebagController = "StatebagController";
--loadClass(_cn.StatebagController)
--
----- Imports ---
--
-----@class StatebagController : BaseObject
--local StatebagController = class("StatebagController");
--
--function StatebagController.new()
--    ---@type StatebagController
--    local self = initMetatable(StatebagController);
--
--    --AddStateBagChangeHandler("blockTasks", nil, function(bagName, key, value)
--    --    local entity = GetEntityFromStateBagName(bagName)
--    --    -- Whoops, we don't have a valid entity!
--    --    if entity === 0 then return end
--    --    -- We don't want to freeze the entity position if the entity collision hasn't loaded yet
--    --    while not HasCollisionLoadedAroundEntity(entity) do
--    --        -- The entity went out of our scope before the collision loaded
--    --        if not DoesEntityExist(entity) then return end
--    --        Wait(250)
--    --    end
--    --    SetEntityInvincible(entity, value)
--    --    FreezeEntityPosition(entity, value)
--    --    TaskSetBlockingOfNonTemporaryEvents(entity, value)
--    --end)
--
--    -- Pour un StateBag global (côté serveur)
--    AddStateBagChangeHandler('some_key', nil, function(bagName, key, value, _unused, replicated)
--        print(string.format("StateBag global changé - Bag : %s, Clé : %s, Valeur : %s, Répliqué : %s", bagName, key, value,
--            replicated))
--    end)
--
--    return self;
--end
--
--_c.StatebagController = StatebagController;
--classloaded(_cn.StatebagController)
